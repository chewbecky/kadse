[{"/Users/rebeccabettinger/dev/kadse/src/App.js":"1","/Users/rebeccabettinger/dev/kadse/src/App.test.js":"2","/Users/rebeccabettinger/dev/kadse/src/components/TREKBox.tsx":"3","/Users/rebeccabettinger/dev/kadse/src/components/TREKButton.js":"4","/Users/rebeccabettinger/dev/kadse/src/components/TREKProgress/TREKProgress.js":"5","/Users/rebeccabettinger/dev/kadse/src/components/TREKProgress/TREKProgressSVG.js":"6","/Users/rebeccabettinger/dev/kadse/src/index.js":"7","/Users/rebeccabettinger/dev/kadse/src/react-app-env.d.ts":"8","/Users/rebeccabettinger/dev/kadse/src/reportWebVitals.js":"9","/Users/rebeccabettinger/dev/kadse/src/setupTests.js":"10","/Users/rebeccabettinger/dev/kadse/src/theme.js":"11"},{"size":7130,"mtime":1607813360995,"results":"12","hashOfConfig":"13"},{"size":246,"mtime":1607713412002,"results":"14","hashOfConfig":"15"},{"size":2154,"mtime":1607789474015,"results":"16","hashOfConfig":"13"},{"size":780,"mtime":1607804285765,"results":"17","hashOfConfig":"13"},{"size":495,"mtime":1607713086118,"results":"18","hashOfConfig":"13"},{"size":707,"mtime":1607790109340,"results":"19","hashOfConfig":"13"},{"size":410,"mtime":1607804285813,"results":"20","hashOfConfig":"13"},{"size":40,"mtime":1607781535275,"results":"21","hashOfConfig":"15"},{"size":362,"mtime":1606242274748,"results":"22","hashOfConfig":"13"},{"size":241,"mtime":1606242274749,"results":"23","hashOfConfig":"15"},{"size":588,"mtime":1606645063389,"results":"24","hashOfConfig":"13"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"28"},"11ys7oj",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"ze9wr3",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"/Users/rebeccabettinger/dev/kadse/src/App.js",["51"],"import \"./index.css\";\nimport \"./App.css\";\nimport \"./theme\";\nimport TREKButton from \"./components/TREKButton\";\nimport { Box, Flex, Heading, SimpleGrid } from \"@chakra-ui/react\";\nimport TREKProgress from \"./components/TREKProgress/TREKProgress\";\nimport TREKBox from \"./components/TREKBox\";\nimport React, { useState, useEffect } from \"react\";\nimport useSound from \"use-sound\";\n// @ts-ignore\nimport completeSound from \"./assets/regeneration_cycle_complete.mp3\";\nimport galaxy from \"./assets/galaxy.png\";\n\nconst setTimerInPageTitle = (timer) => {\n  document.title = `${Math.floor(timer / 60)\n    .toString()\n    .padStart(2, 0)}:${(timer % 60).toString().padStart(2, 0)}`;\n};\n\nfunction App() {\n  const [timer, setTimer] = useState(0);\n  const [isActive, setIsActive] = useState(false);\n  const [timerStart, setTimerStart] = useState(0);\n  const [progressStart, setProgressStart] = useState(0);\n  const [play] = useSound(completeSound, {\n    volume: 0.25,\n  });\n\n  function toggle() {\n    setIsActive(!isActive);\n    setTimerStart(Math.floor(Date.now() / 1000) + timer);\n  }\n\n  function initTimer(value) {\n    setTimer(value);\n    setTimerStart(value);\n    setProgressStart(value);\n    setTimerInPageTitle(value);\n  }\n\n  useEffect(() => {\n    let interval = null;\n    let now = null;\n    if (isActive) {\n      interval = setInterval(() => {\n        now = Math.floor(new Date().getTime() / 1000);\n        setTimer(() => timerStart - now);\n        setTimerInPageTitle(timer - 1);\n      }, 1000);\n      if (timer === 0) {\n        setTimerInPageTitle(timer);\n        clearInterval(interval);\n        setIsActive(!isActive);\n        play();\n      }\n    } else if (!isActive) {\n      clearInterval(interval);\n    }\n    return () => clearInterval(interval);\n  }, [isActive, play, timer]);\n\n  return (\n    <Flex\n      direction=\"column\"\n      backgroundColor=\"black\"\n      height=\"100vh\"\n      p={[1, 2, 4]}\n    >\n      <Flex justifyContent=\"space-between\" width=\"100%\">\n        <Flex direction=\"column\" justifyContent=\"flex-end\" alignItems=\"left\">\n          <TREKBox text=\"LCARS\" tint=\"lavender\" mirror={true} form=\"block\" />\n          <TREKBox\n            width={window.screen.availWidth / 3}\n            text=\"NCC-74656\"\n            tint=\"purple\"\n            mirror={true}\n            form=\"curve\"\n          />\n        </Flex>\n        <Flex direction=\"column\" justifyContent=\"flex-end\" flex=\"1\">\n          <Box\n            width=\"100%\"\n            height=\"24px\"\n            backgroundColor=\"lavender\"\n            margin=\"4px 8px 4px 0px\"\n          ></Box>\n        </Flex>\n        <Flex\n          direction=\"column\"\n          justifyContent=\"flex-end\"\n          flex=\"5\"\n          marginLeft=\"8px\"\n        >\n          <Box position=\"absolute\" top=\"20px\" right=\"16px\">\n            <Heading\n              as=\"h1\"\n              fontWeight=\"400\"\n              textAlign=\"right\"\n              size=\"4xl\"\n              color=\"orange\"\n            >\n              pomodoro timer\n            </Heading>\n            <SimpleGrid\n              gridTemplateColumns=\"192px 192px\"\n              gridTemplateRows=\"auto\"\n              gridGap=\"8px\"\n            >\n              <TREKButton\n                label=\"pomodoro\"\n                color=\"darkCoral\"\n                onclick={() => {\n                  initTimer(1500);\n                }}\n              />\n              <TREKButton\n                label=\"long break\"\n                color=\"orange\"\n                onclick={() => {\n                  initTimer(900);\n                }}\n              />\n              <TREKButton\n                label=\"short break\"\n                color=\"orange\"\n                onclick={() => {\n                  initTimer(300);\n                }}\n              />\n              <TREKButton\n                label=\"start/stop\"\n                color=\"lightGreen\"\n                onclick={() => toggle()}\n              />\n            </SimpleGrid>\n          </Box>\n          <Box\n            width=\"100%\"\n            height=\"24px\"\n            backgroundColor=\"lavender\"\n            marginY=\"4px\"\n          ></Box>\n        </Flex>\n      </Flex>\n      <Flex\n        justifyContent=\"space-between\"\n        width=\"100%\"\n        flex=\"1\"\n        backgroundImage={`url(${galaxy})`}\n        backgroundSize=\"contain\"\n        backgroundPosition=\"center\"\n        backgroundRepeat=\"no-repeat\"\n      >\n        <Flex direction=\"column\">\n          <TREKBox\n            width={window.screen.availWidth / 3}\n            text=\"Captain\"\n            tint=\"darkCoral\"\n            form=\"curve\"\n          />\n          <TREKBox text=\"Janeway\" tint=\"darkCoral\" form=\"block\" mirror />\n          <TREKBox\n            text=\"Engage\"\n            tint=\"orange\"\n            form=\"block\"\n            height={150}\n            mirror\n          />\n          <Box\n            backgroundColor=\"lightOrange\"\n            flex=\"1 1 auto\"\n            width=\"156px\"\n            mx=\"8px\"\n            my=\"4px\"\n          ></Box>\n        </Flex>\n        <Flex\n          direction=\"column\"\n          justifyContent=\"flex-start\"\n          flex=\"1\"\n          flexBasis=\"200px\"\n        >\n          <Box\n            width=\"100%\"\n            height=\"24px\"\n            backgroundColor=\"lavender\"\n            margin=\"4px 8px 4px 0px\"\n          ></Box>\n        </Flex>\n        <Flex\n          marginLeft=\"8px\"\n          direction=\"column\"\n          justifyContent=\"space-between\"\n          flex=\"5\"\n        >\n          <Box height=\"24px\" backgroundColor=\"lavender\" marginY=\"4px\"></Box>\n          <Box position=\"absolute\" bottom=\"16px\" right=\"16px\">\n            <Flex direction=\"column\" justifyContent=\"flex-end\">\n              <Heading\n                fontWeight=\"400\"\n                size=\"4xl\"\n                color=\"orange\"\n                textAlign=\"right\"\n                sx={{ \"font-variant-numeric\": \"tabular-nums\" }}\n              >\n                <Box display=\"inline-block\" width=\"24px\">{`${\n                  timer ? Math.floor(timer / 60 / 10) : \"0\"\n                }`}</Box>\n                <Box display=\"inline-block\" width=\"24px\">{`${\n                  timer ? Math.floor(timer / 60) % 10 : \"0\"\n                }`}</Box>\n                :\n                <Box display=\"inline-block\" width=\"24px\">{`${\n                  timer ? Math.floor((timer % 60) / 10) : \"0\"\n                }`}</Box>\n                <Box display=\"inline-block\" width=\"24px\">{`${\n                  timer ? (timer % 60) % 10 : \"0\"\n                }`}</Box>\n              </Heading>\n              <TREKProgress\n                seconds={\n                  timer && progressStart\n                    ? Math.floor((timer / progressStart) * 100)\n                    : 0\n                }\n                width=\"300px\"\n                alignSelf=\"flex-end\"\n              />\n              <Heading\n                as=\"h3\"\n                fontWeight=\"400\"\n                size=\"2xl\"\n                color=\"orange\"\n                textAlign=\"right\"\n                py=\"16px\"\n              >\n                Efficiency Mode\n              </Heading>\n            </Flex>\n          </Box>\n        </Flex>\n      </Flex>\n    </Flex>\n  );\n}\n\nexport default App;\n",["52","53"],"/Users/rebeccabettinger/dev/kadse/src/App.test.js",[],"/Users/rebeccabettinger/dev/kadse/src/components/TREKBox.tsx",[],["54","55"],"/Users/rebeccabettinger/dev/kadse/src/components/TREKButton.js",[],"/Users/rebeccabettinger/dev/kadse/src/components/TREKProgress/TREKProgress.js",[],"/Users/rebeccabettinger/dev/kadse/src/components/TREKProgress/TREKProgressSVG.js",[],["56","57"],"/Users/rebeccabettinger/dev/kadse/src/index.js",[],"/Users/rebeccabettinger/dev/kadse/src/react-app-env.d.ts",[],"/Users/rebeccabettinger/dev/kadse/src/reportWebVitals.js",[],"/Users/rebeccabettinger/dev/kadse/src/setupTests.js",[],"/Users/rebeccabettinger/dev/kadse/src/theme.js",[],{"ruleId":"58","severity":1,"message":"59","line":60,"column":6,"nodeType":"60","endLine":60,"endColumn":29,"suggestions":"61"},{"ruleId":"62","replacedBy":"63"},{"ruleId":"64","replacedBy":"65"},{"ruleId":"62","replacedBy":"63"},{"ruleId":"64","replacedBy":"65"},{"ruleId":"62","replacedBy":"66"},{"ruleId":"64","replacedBy":"67"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'timerStart'. Either include it or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setTimer' needs the current value of 'timerStart'.","ArrayExpression",["68"],"no-native-reassign",["69"],"no-negated-in-lhs",["70"],["69"],["70"],{"desc":"71","fix":"72"},"no-global-assign","no-unsafe-negation","Update the dependencies array to be: [isActive, play, timer, timerStart]",{"range":"73","text":"74"},[1750,1773],"[isActive, play, timer, timerStart]"]